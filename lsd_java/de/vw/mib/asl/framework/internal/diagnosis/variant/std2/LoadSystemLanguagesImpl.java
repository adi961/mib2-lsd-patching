/*
 * Decompiled with CFR 0.152.
 */
package de.vw.mib.asl.framework.internal.diagnosis.variant.std2;

import de.vw.mib.asl.framework.api.diagnosis.config.LoadSystemLanguages;
import de.vw.mib.asl.framework.internal.diagnosis.config.AccessLanguage;
import de.vw.mib.asl.framework.internal.diagnosis.config.util.Engine;
import de.vw.mib.asl.framework.internal.framework.ServiceManager;
import de.vw.mib.log4mib.LogMessage;

public final class LoadSystemLanguagesImpl
extends AccessLanguage
implements LoadSystemLanguages {
    private final boolean mValid;
    private final int[] mIndexToId = new int[]{610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673};

    public LoadSystemLanguagesImpl(byte[] byArray) {
        super(byArray, new int[]{325, 389}, 906042371, 0);
        this.mConfiguration = new int[]{1091, 0, 64, 1, 0, 20051, 8, 0, 0, 1, 3, 1684365124, 69, 30029, 40, 1, 0, 11, -1, 20051, 2, 6, 0, 0, -1, 1701732167, 66, 30029, 40, 7, 0, 25, -1, 20051, 2, 12, 0, 0, -1, 30029, 40, 13, 0, -1, -1, 20051, 2, 18, 0, 0, -1, 30029, 40, 19, 0, -1, -1, 20051, 2, 24, 0, 0, -1, 30029, 40, 25, 0, -1, -1, 20051, 2, 30, 0, 0, -1, 30029, 40, 31, 0, -1, -1, 20051, 2, 36, 0, 0, -1, 30029, 40, 37, 0, -1, -1, 20051, 2, 42, 0, 0, -1, 30029, 40, 43, 0, -1, -1, 20051, 2, 48, 0, 0, -1, 30029, 40, 49, 0, -1, -1, 20051, 2, 54, 0, 0, -1, 30029, 40, 55, 0, -1, -1, 20051, 2, 60, 0, 0, -1, 30029, 40, 61, 0, -1, -1, 20051, 2, 66, 0, 0, -1, 30029, 40, 67, 0, -1, -1, 20051, 2, 72, 0, 0, -1, 30029, 40, 73, 0, -1, -1, 20051, 2, 78, 0, 0, -1, 30029, 40, 79, 0, -1, -1, 20051, 2, 84, 0, 0, -1, 30029, 40, 85, 0, -1, -1, 20051, 2, 90, 0, 0, -1, 30029, 40, 91, 0, -1, -1, 20051, 2, 96, 0, 0, -1, 30029, 40, 97, 0, -1, -1, 20051, 2, 102, 0, 0, -1, 30029, 40, 103, 0, -1, -1, 20051, 2, 108, 0, 0, -1, 30029, 40, 109, 0, -1, -1, 20051, 2, 114, 0, 0, -1, 30029, 40, 115, 0, -1, -1, 20051, 2, 120, 0, 0, -1, 30029, 40, 121, 0, -1, -1, 20051, 2, 126, 0, 0, -1, 30029, 40, 127, 0, -1, -1, 20051, 2, 132, 0, 0, -1, 30029, 40, 133, 0, -1, -1, 20051, 2, 138, 0, 0, -1, 30029, 40, 139, 0, -1, -1, 20051, 2, 144, 0, 0, -1, 30029, 40, 145, 0, -1, -1, 20051, 2, 150, 0, 0, -1, 30029, 40, 151, 0, -1, -1, 20051, 2, 156, 0, 0, -1, 30029, 40, 157, 0, -1, -1, 20051, 2, 162, 0, 0, -1, 30029, 40, 163, 0, -1, -1, 20051, 2, 168, 0, 0, -1, 30029, 40, 169, 0, -1, -1, 20051, 2, 174, 0, 0, -1, 30029, 40, 175, 0, -1, -1, 20051, 2, 180, 0, 0, -1, 30029, 40, 181, 0, -1, -1, 20051, 2, 186, 0, 0, -1, 30029, 40, 187, 0, -1, -1, 20051, 2, 192, 0, 0, -1, 30029, 40, 193, 0, -1, -1, 20051, 2, 198, 0, 0, -1, 30029, 40, 199, 0, -1, -1, 20051, 2, 204, 0, 0, -1, 30029, 40, 205, 0, -1, -1, 20051, 2, 210, 0, 0, -1, 30029, 40, 211, 0, -1, -1, 20051, 2, 216, 0, 0, -1, 30029, 40, 217, 0, -1, -1, 20051, 2, 222, 0, 0, -1, 30029, 40, 223, 0, -1, -1, 20051, 2, 228, 0, 0, -1, 30029, 40, 229, 0, -1, -1, 20051, 2, 234, 0, 0, -1, 30029, 40, 235, 0, -1, -1, 20051, 2, 240, 0, 0, -1, 30029, 40, 241, 0, -1, -1, 20051, 2, 246, 0, 0, -1, 30029, 40, 247, 0, -1, -1, 20051, 2, 252, 0, 0, -1, 30029, 40, 253, 0, -1, -1, 20051, 2, 258, 0, 0, -1, 30029, 40, 259, 0, -1, -1, 20051, 2, 264, 0, 0, -1, 30029, 40, 265, 0, -1, -1, 20051, 2, 270, 0, 0, -1, 30029, 40, 271, 0, -1, -1, 20051, 2, 276, 0, 0, -1, 30029, 40, 277, 0, -1, -1, 20051, 2, 282, 0, 0, -1, 30029, 40, 283, 0, -1, -1, 20051, 2, 288, 0, 0, -1, 30029, 40, 289, 0, -1, -1, 20051, 2, 294, 0, 0, -1, 30029, 40, 295, 0, -1, -1, 20051, 2, 300, 0, 0, -1, 30029, 40, 301, 0, -1, -1, 20051, 2, 306, 0, 0, -1, 30029, 40, 307, 0, -1, -1, 20051, 2, 312, 0, 0, -1, 30029, 40, 313, 0, -1, -1, 20051, 2, 318, 0, 0, -1, 30029, 40, 319, 0, -1, -1, 20051, 2, 324, 0, 0, -1, 30029, 40, 325, 0, -1, -1, 20051, 2, 330, 0, 0, -1, 30029, 40, 331, 0, -1, -1, 20051, 2, 336, 0, 0, -1, 30029, 40, 337, 0, -1, -1, 20051, 2, 342, 0, 0, -1, 30029, 40, 343, 0, -1, -1, 20051, 2, 348, 0, 0, -1, 30029, 40, 349, 0, -1, -1, 20051, 2, 354, 0, 0, -1, 30029, 40, 355, 0, -1, -1, 20051, 2, 360, 0, 0, -1, 30029, 40, 361, 0, -1, -1, 20051, 2, 366, 0, 0, -1, 30029, 40, 367, 0, -1, -1, 20051, 2, 372, 0, 0, -1, 30029, 40, 373, 0, -1, -1, 20051, 2, 378, 0, 0, -1, 30029, 40, 379, 0, -1, -1, 20051, 2, 384, 0, 0, -1, 262, 655, 555, 688, 189, 721, 585, 623, 171, 656, 567, 689, 201, 722, 597, 624, 183, 657, 579, 690, 213, 723, 609, 625, 195, 658, 591, 691, 225, 724, 621, 626, 207, 659, 603, 692, 237, 725, 633, 627, 219, 660, 615, 693, 249, 726, 645, 628, 231, 661, 627, 694, 261, 727, 657, 629, 243, 662, 639, 695, 273, 728, 669, 630, 255, 663, 651, 696, 285, 729, 681, 631, 267, 664, 663, 697, 297, 730, 693, 632, 279, 665, 675, 698, 309, 731, 705, 633, 291, 666, 687, 699, 321, 732, 717, 634, 303, 667, 699, 700, 333, 733, 729, 635, 315, 668, 711, 701, 345, 734, 741, 636, 327, 669, 723, 702, 357, 735, 753, 637, 339, 670, 735, 703, 369, 736, 765, 638, 351, 671, 747, 704, 381, 737, 777, 639, 363, 672, 759, 705, 393, 128, 128, 640, 375, 673, 771, 706, 405, 128, 128, 641, 387, 674, 19, 707, 417, 609, 5, 642, 399, 675, 33, 708, 429, 610, 13, 643, 411, 676, 45, 709, 441, 611, 27, 644, 423, 677, 57, 710, 453, 612, 39, 645, 435, 678, 69, 711, 465, 613, 51, 646, 447, 679, 81, 712, 477, 614, 63, 647, 459, 680, 93, 713, 489, 615, 75, 648, 471, 681, 105, 714, 501, 616, 87, 649, 483, 682, 117, 715, 513, 617, 99, 650, 495, 683, 129, 716, 525, 618, 111, 651, 507, 684, 141, 717, 537, 619, 123, 652, 519, 685, 153, 718, 549, 620, 135, 653, 531, 686, 165, 719, 561, 621, 147, 654, 543, 687, 177, 720, 573, 622, 159, 783};
        this.mEngine = new Engine(this.mConfiguration);
        this.mValid = this.validate();
        if (!this.mValid) {
            LogMessage logMessage = ServiceManager.logger.error(16384).append("System Languages invalid: ");
            logMessage.append(this.getValue(609));
            for (int i2 = 0; i2 < this.mIndexToId.length; ++i2) {
                logMessage.append(", ");
                logMessage.append(new String(this.getByteArray(this.mIndexToId[i2])));
            }
            logMessage.log();
        }
        ServiceManager.persistence.writeBoolean(906042371, 0, !this.mValid);
    }

    private boolean validate() {
        int n;
        if (this.mData.length == 0) {
            return false;
        }
        int n2 = this.getValue(609);
        if (n2 > 32) {
            return false;
        }
        if (n2 < 1) {
            return false;
        }
        int n3 = this.mIndexToId.length;
        if ((n2 <<= 1) > n3) {
            n2 = n3;
        }
        for (int i2 = 0; i2 < n2; ++i2) {
            n = this.mIndexToId[i2];
            byte[] byArray = this.getByteArray(n);
            if (this.isValidLanguage(byArray)) continue;
            return false;
        }
        String[] stringArray = ServiceManager.configManagerDiag.getVariantDefinedLanguages();
        if (stringArray == null) {
            return false;
        }
        block1: for (n = 0; n < n2; ++n) {
            int n4 = this.mIndexToId[n];
            byte[] byArray = this.getByteArray(n4);
            String string = new String(byArray);
            for (int i3 = 0; i3 < stringArray.length; ++i3) {
                String string2 = stringArray[i3];
                if (string.equals(string2)) continue block1;
            }
            return false;
        }
        return true;
    }

    @Override
    public boolean isValid() {
        return this.mValid;
    }

    @Override
    public String getLanguage(int n) {
        int n2 = this.mIndexToId[n];
        byte[] byArray = this.getByteArray(n2);
        String string = new String(byArray);
        return string;
    }

    @Override
    public boolean isLanguageTypeFemale(int n) {
        return (n & 1) != 0;
    }

    @Override
    public boolean isLanguageTypeMale(int n) {
        return (n & 2) != 0;
    }
}

